{"version":3,"sources":["Cells.js","Game.js","Rules.js","Welcome.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Cells","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Grid","state","gamecells","interval","isEngaged","generationNum","handleClick","e","elemOffset","getElement","offsetX","clientX","offsetY","clientY","Math","floor","columns","rows","gameboard","setState","createNewCells","startGame","iterationMethod","stopGame","timeoutHandler","window","clearTimeout","handleClear","makeNewBoard","handleRandom","random","newGameBoard","createNewBoard","neighbors","neighborsMethod","setTimeout","addGeneration","console","log","handleInterval","target","value","HEIGHT","WIDTH","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","dirs","i","length","dir","y1","x1","onChange","backgroundSize","onClick","ref","n","map","gamecell","key","to","Rules","Welcome","About","href","App","exact","path","component","Game","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe4b0a2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Game.css';\r\n\r\n\r\n\r\nconst CELL_SIZE = 20;\r\n\r\nclass Cells extends React.Component {\r\n render() {\r\n   const { x, y } = this.props;\r\n   return (\r\n     <div\r\n       className=\"Cell\"\r\n       style={{\r\n         left: `${CELL_SIZE * x + 1}px`,\r\n         top: `${CELL_SIZE * y + 1}px`,\r\n         width: `${CELL_SIZE -1 }px`,\r\n         height: `${CELL_SIZE - 1}px`\r\n       }}\r\n     />\r\n   );\r\n }\r\n}\r\n\r\nexport default Cells;","import React from \"react\";\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\nimport Cells from './Cells'\r\n\r\n  \r\n\r\n\r\nconst CELL_SIZE = 20;\r\nconst WIDTH = 640;\r\nconst HEIGHT =  440;\r\n\r\nconst rows = 25;\r\nconst columns = 25;\r\n\r\n\r\n//const operations = [\r\n //[0, 1],\r\n  //[0, -1],\r\n  //[1, -1],\r\n  //[-1, 1],\r\n  //[1, 1],\r\n  //[-1, -1],\r\n  //[1, 0],\r\n  //[-1, 0]\r\n//];\r\n//Create Grid\r\nclass Grid extends React.Component {\r\n  constructor() {\r\n      super();\r\n      this.rows = HEIGHT / CELL_SIZE;\r\n      this.columns = WIDTH/ CELL_SIZE;\r\n      this.gameboard = this.createNewBoard();\r\n  }\r\n  state = {\r\n      gamecells: [],\r\n      interval: 100,\r\n      isEngaged: false,\r\n      generationNum: 0\r\n  };\r\n\r\n  createNewBoard() {\r\n    let gameboard = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n        gameboard[y] = [];\r\n            for (let x = 0; x < this.columns; x++) {\r\n                gameboard[y][x] = false;\r\n            }\r\n        }\r\n        return gameboard;\r\n    }\r\n     \r\n\r\n    createNewCells() {\r\n    let gamecells = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n        for (let x = 0; x < this.columns; x++) {\r\n        if (this.gameboard[y][x]) {\r\n            gamecells.push({ x, y });\r\n        }\r\n    }\r\n    }\r\n        return gamecells;\r\n    }\r\n    getElement() {\r\n      const rect = this.boardRef.getBoundingClientRect(); //https://www.w3schools.com/jsref/met_element_getboundingclientrect.asp\r\n      const doc = document.documentElement;\r\n      \r\n          return {\r\n              x: rect.left + window.pageXOffset - doc.clientLeft,\r\n              y: rect.top + window.pageYOffset - doc.clientTop\r\n          };\r\n      }\r\n  \r\n      handleClick = e => {\r\n        const elemOffset = this.getElement();\r\n        const offsetX = e.clientX - elemOffset.x;\r\n        const offsetY = e.clientY - elemOffset.y;\r\n      \r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY / CELL_SIZE);\r\n      \r\n        if (x >= 0 && x <= this.columns && y >= 0 && y <= this.rows) {\r\n            this.gameboard[y][x] = !this.gameboard[y][x];\r\n        }\r\n            this.setState({ gamecells: this.createNewCells() });\r\n        };\r\n        \r\n//Start/Stop The Game Click\r\n        startGame = () => {\r\n          this.setState({ isEngaged: true }, () => this.iterationMethod());\r\n      };\r\n      \r\n      stopGame = () => {\r\n          this.setState({ isEngaged: false });\r\n          if (this.timeoutHandler) {\r\n              window.clearTimeout(this.timeoutHandler);\r\n              this.timeoutHandler = null;\r\n          }\r\n      };\r\n     \r\n      handleClear = () => {\r\n        this.gameboard = this.makeNewBoard();\r\n        this.setState({ gamecells: this.createNewCells() , generationNum: 0 });\r\n      };\r\n\r\n      handleRandom = () => {\r\n        for (let y = 0; y < this.rows; y++) {\r\n          for (let x = 0; x < this.columns; x++) {\r\n            this.gameboard[y][x] = Math.random() >= 0.5;\r\n          }\r\n        }\r\n        this.setState({ gamecells: this.createNewCells() });\r\n      }\r\n    \r\n    iterationMethod = () => {\r\n    let newGameBoard = this.createNewBoard();\r\n    \r\n //lookig at the neighbors\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.columns; x++) {\r\n      let neighbors = this.neighborsMethod(this.gameboard, x, y);\r\n          if (this.gameboard[y][x]) {\r\n              if (neighbors === 2 || neighbors === 3) {\r\n                  newGameBoard[y][x] = true;\r\n              } \r\n              else {\r\n                  newGameBoard[y][x] = false;\r\n              }\r\n          } \r\n          else {\r\n              if (!this.gameboard[y][x] && neighbors === 3) {\r\n                  newGameBoard[y][x] = true;\r\n          }\r\n      }\r\n      }\r\n  }\r\n  this.gameboard = newGameBoard;\r\n  this.setState({ gamecells: this.createNewCells() });\r\n\r\n  if (this.state.isEngaged) {\r\n  this.timeoutHandler = window.setTimeout(() => {\r\n      this.iterationMethod();\r\n  }, this.state.interval);\r\n  }\r\n//generation\r\n  let addGeneration = this.state.generationNum;\r\n  ++addGeneration;\r\n  this.setState({ generationNum: addGeneration });\r\n  console.log(this.state.generationNum);\r\n  }\r\n     \r\n    \r\n  neighborsMethod(gameboard, x, y) {\r\n    let neighbors = 0;\r\n    const dirs = [[-1, -1],[-1, 0],[-1, 1],[0, 1],[1, 1],[1, 0],[1, -1],[0, -1]];\r\n    for (let i = 0; i < dirs.length; i++) {\r\n      const dir = dirs[i];\r\n      let y1 = y + dir[0];\r\n      let x1 = x + dir[1];\r\n\r\n      if (\r\n        x1 >= 0 &&\r\n        x1 < this.columns &&\r\n        y1 >= 0 &&\r\n        y1 < this.rows &&\r\n        gameboard[y1][x1]\r\n      ) {\r\n        neighbors++;\r\n      }\r\n    }\r\n    return neighbors;\r\n  }\r\n\r\n  handleInterval = e => {\r\n    this.setState({ interval: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { gamecells } = this.state;\r\n    return (\r\n      <div>\r\n        <h1> Sheila's Game of Life</h1>\r\n        <div><h2>Generation: {this.state.generationNum}</h2>\r\n        <div className=\"speed\">\r\n          Change Every{\" \"}\r\n          <input\r\n            value={this.state.interval}\r\n            onChange={this.handleInterval}\r\n          />{\" \"}\r\n          milliseconds\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n        <div\r\n          className=\"gameBoard\"\r\n          style={{\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\r\n          }}\r\n          onClick={this.handleClick}\r\n          ref={n => {\r\n            this.boardRef = n;\r\n          }}\r\n        >\r\n          {gamecells.map(gamecell => (\r\n            <Cells x={gamecell.x} y={gamecell.y} key={`${gamecell.x}, ${gamecell.y}`} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"buttons\">\r\n          {this.state.isEngaged ? (\r\n            <button className=\"button\" onClick={this.stopGame}>\r\n              Stop \r\n            </button>\r\n          ) : (\r\n            <button className=\"button\" onClick={this.startGame}>\r\n              Start \r\n            </button>\r\n          )}\r\n          <button className=\"button\" onClick={this.handleRandom}>\r\n            Random\r\n          </button>\r\n         \r\n          <button className=\"button\" onClick={this.handleClear}>\r\n            Clear\r\n          </button>\r\n          <div>\r\n        <div> <Link to='/' className=\"WELCOME\"><button className=\"WELCOME\">Welcome</button></Link>\r\n             <Link to='/rules'><button>Rules of the Game</button></Link>\r\n             <Link to='/about'><button>About the Game</button></Link>\r\n        </div>\r\n        </div>\r\n          \r\n          </div>\r\n          \r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Grid;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Rules(props) {\r\n  return (\r\n    <div className=\"RulesContainer\">\r\n      <div className=\"Rules\">\r\n        <h2>Rules for the Game of Life:</h2>\r\n        <h4>In the Game of Life, these rules examine each cell of the grid.\r\n        For each cell, it counts that cell's eight neighbors (up, down, left,\r\n          right, and diagonals), and then act on that result.</h4>\r\n        <ul>\r\n          <li>If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.</li><br/>\r\n          <li>If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.</li>\r\n        </ul><br/>\r\n        \r\n        <Link to='/gameoflife'><button>Go to the Game!</button></Link>\r\n        <Link to='/about'><button>About the Game</button></Link>\r\n        <Link to='/' className=\"WELCOME\"><button className=\"WELCOME\">Welcome</button></Link>\r\n      </div>\r\n    </div>\r\n  )\r\n        }","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Welcome(props) {\r\n  return (\r\n    <div className=\"Welcome\">\r\n      <div className=\"WelcomeInner\">\r\n        <h1>Welcome to Sheila's Game of Life</h1>\r\n        <Link to='/gameoflife'><button>Go to the Game!</button></Link>\r\n        <Link to='/rules'><button>Rules of the Game</button></Link>\r\n        <Link to='/about'><button>About the Game</button></Link>\r\n      </div>\r\n    </div>\r\n  )}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div className=\"AboutContainer\">\r\n      <div className=\"About\">\r\n        <h3>About the Game of Life:</h3>\r\n        <p>\r\n        The Game of Life is a cellular automaton that requires no input once\r\n        the game has begun and outcome depends wholly on the starting state.\r\n        </p>\r\n        <p>\r\n        Cellular automata simulate living beings/organisms and reproduction. They\r\n        are also, by nature, <a href=\"https://en.wikipedia.org/wiki/Turing_completeness\">Turing complete</a>.\r\n        John Conway published his initial game in the October 1970 issue of Scientific American. when\r\n        Conway was first figuring the later development of certain configurations, he did so\r\n        completely by hand.\r\n        </p>\r\n        <p>\r\n        Cellular automata can be used to create musical and visual compositions, to generate\r\n        random numbers and sequences, and to study the development of life itself.\r\n        </p>\r\n       \r\n        <Link to='/gameoflife'><button>Go to the Game!</button></Link>\r\n        <Link to='/rules'><button>Rules of the Game</button></Link>\r\n        <Link to='/' className=\"WELCOME\"><button className=\"WELCOME\">Welcome</button></Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport Game from './Game';\nimport Rules from './Rules';\nimport Welcome from './Welcome';\nimport About from './About';\n\n\nclass App extends Component {\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n       \n       \n       <Route exact path = '/' component={Welcome} />\n       <Route path = '/rules' component={Rules} />\n        <Route path = '/about' component={About} />\n        <Route path = '/gameoflife' component={Game} />\n        \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'; \nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}